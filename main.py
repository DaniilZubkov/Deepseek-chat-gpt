import os
from aiogram import Bot, Dispatcher, F, types, Router
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, FSInputFile, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from keyboards import main_keyboard
from types import MappingProxyType

import asyncio
from asyncio import Semaphore

from openai import OpenAI
from g4f.client import Client
from g4f.Provider import You, DeepInfra
import g4f
import re
from db import Database
from dotenv import load_dotenv
import base64
import random
import logging
from functools import lru_cache
import time

from config import allowed_models, system_prompt, img_generation_models
from funcs import format_answer, clean_output, download_photo, clean_markdown, encode_img, cleanup_image, get_client, update_keyboard, \
send_long_message
from ai.model_funcs import create_response, _prepare_messages


load_dotenv()
env = os.getenv


bot = Bot(env("BOT_TOKEN"))
dp = Dispatcher(storage=MemoryStorage())
db = Database('database.db')

router = Router()



class ModelSelection(StatesGroup):
    choosing_model = State()
    choosing_version = State()




async def handle_model_requests(message,
                                all_models: list,
                                model_title: str,
                                system_prompt: str,
                                img_support=True,
                                img_path: str | None=None,
                                ):
    try:

        if message.photo and not img_support:
            await message.answer("‚ùå –≠—Ç–∞ –º–æ–¥–µ–ª—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            return

        enable_message = await message.answer(
                f'üõ†Ô∏è ***–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ, {model_title} –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å...***', parse_mode="MARKDOWN")

        message_text = str(message.caption if message.photo else message.text)[:8000] 

        if len(message_text) <= 8:
            await message.answer('***–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–µ –º–µ–Ω—å—à–µ 8 —Å–∏–º–≤–æ–ª–æ–≤.***', parse_mode='MAKRDOWN')
            return

        # async with asyncio.TaskGroup() as tg:
        success = False
        for attempt, model_info in enumerate(all_models, 1):
            try:
                if attempt > 1:
                    await asyncio.sleep(1)

                start_time = time.monotonic()

                # task = tg.create_task(
                #     asyncio.wait_for(
                #         create_response(
                #             model=model_info['model'],
                #             prompt=system_prompt,
                #             text=message_text,
                #             client=model_info['client'],
                #             img_path=img_path,
                #         ),
                #         timeout=40.0  
                #     )
                # )


                try:
                    completion = await create_response(
                        model=model_info['model'],
                        prompt=system_prompt,
                        text=message_text,
                        client=model_info['client'],
                        img_path=img_path,
                    )

                    
                    # completion = await task
                    if not completion.choices:
                        logging.warning(f"Attempt {attempt}: Empty choices")
                        continue

                    model_answer = completion.choices[0].message.content
                    if not model_answer.strip():
                        logging.warning(f"Attempt {attempt}: Empty response")
                        continue

                    model_new_answer = clean_output(clean_markdown(model_answer))
                    if not model_new_answer.strip():
                        logging.warning("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏")
                        continue

                    await enable_message.delete()
                    await send_long_message(model_new_answer, message)
                    success = True
                    break

                    # return True

                except asyncio.TimeoutError:
                    logging.warning(f"Timeout for model {model_info['model']}")
                    continue

            except Exception as e:
                logging.warning(f"Attempt {attempt} failed: {str(e)}")
                continue

            if success is False:
                await message.answer('‚ö†Ô∏è ***–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏***\n\n' \
                            '___–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ...___', parse_mode="MARKDOWN")

                return

    except Exception as e:
        logging.error(f"Error in handle_model_request: {str(e)}")
        await message.answer('‚ùå ***–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç...***', parse_mode="MARKDOWN")

        return

    finally:
        await cleanup_image(img_path)
        logging.warning(f"Model response time: {time.monotonic() - start_time:.2f}s")

        return
    






@router.message(Command('start'))
async def start(message: Message):
    try:
        db.create_tables()
        black_photo_path = 'fotos/black_img.jpg'

        if (not db.user_exists(message.from_user.id)):
            db.add_user(message.from_user.id)
            db.set_nickname(message.from_user.id, message.from_user.username)
            db.set_signup(message.from_user.id, 'done')

        await message.answer_photo(photo=FSInputFile(black_photo_path),
                                   caption=f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}. –Ø AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ Telegram. –ó–¥–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã –º–Ω–æ–≥–∏–µ –º–æ–¥–µ–ª–∏ —Ç–∞–∫–∏–µ –∫–∞–∫: ***GPT, DEEPSEEK, GEMIMI –∏ –¥—Ä—É–≥–∏–µ.*** \n\n'
                                           f'***–¢—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω—É—é –¥–ª—è —Å–µ–±—è –º–æ–¥–µ–ª—å –ø–æ –∫–Ω–æ–ø–∫–µ.*** üëá',
                                   parse_mode="MARKDOWN", reply_markup=main_keyboard())

    except Exception as e:
        print(e)





@router.message()
async def get_message(message: Message):
    try:
        current_model = db.get_model(message.from_user.id)
        
        if not current_model:
            raise ValueError("Model not set for user")

        model_info = next((v for v in allowed_models.values() if v['code'] == current_model), None)

        if not model_info:
            raise ValueError(f"Model not found or not supported: {current_model}")

        img_path = None
        if message.photo:
            img_path = f'user_photos/{message.photo[-1].file_id}.jpg'
            await download_photo(message.photo[-1].file_id, img_path)


        clients = []
        for model_conf in model_info['models']:
            client_type = model_conf['client']
            if client_type == 'openrouter':
                clients.append({
                    'model': model_conf['model'],
                    'client': get_client(client_type, model_info['api-key'])
                })
            else:
                clients.append({
                    'model': model_conf['model'],
                    'client': get_client(client_type)
                })

        model_title = next((k for k, v in allowed_models.items() if v['code'] == current_model), current_model)
        
        await handle_model_requests(
            message=message,
            img_support=model_info['img_support'],
            img_path=img_path,
            all_models=clients,
            model_title=model_title,
            system_prompt=system_prompt
        )

        return

    except Exception as e:
        print(e)
        await message.answer('‚ùå ***–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç...***', parse_mode='MARKDOWN')
        return



# –°–ú–ï–ù–ê –¢–ï–ö–°–¢–û–í–û–ô –ú–û–î–ï–õ–ò
@router.callback_query(F.data == 'change_model')
async def change_txt_model(callback_query: CallbackQuery):
    black_photo_path = 'fotos/black_img.jpg'

    try:
        builder = InlineKeyboardBuilder()
        cur_model = db.get_model(callback_query.from_user.id)


        for model_name, model_data in allowed_models.items():
            if model_data['code'] == cur_model:
                builder.button(text=f"‚úÖ {model_name}", callback_data=f"model_{model_data['code']}")
            else:
                builder.button(text=model_name, callback_data=f"model_{model_data['code']}")

        builder.adjust(3, 1, 1, 1, 1, 1, 2, 2, 2)

        await callback_query.message.answer(f'–í —Ä–∞–∑–¥–µ–ª–µ –µ—Å—Ç—å –º–æ–¥–µ–ª–∏ —Ç–∞–∫–∏–µ –∫–∞–∫ <b>ChatGPT, Claude, Gemini, Deepseek –∏ –º–Ω–æ–≥–∏–µ –¥—Ä—É–≥–∏–µ</b>:\n\n'
                                               f'<b>üêº Deepseepk-R1</b> - –ú–æ–¥–µ–ª—å –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á —Å –≥–ª—É–±–æ–∫–∏–º —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ–º\n'
                                               f'<b>üê≥ Deepseek-V3</b> - –ö–∏—Ç–∞–π—Å–∫–∞—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å, —Å–æ–∑–¥–∞–Ω–∞—è –õ—è–Ω–æ–º –í—ç–Ω—å—Ñ—ç–Ω–æ–º\n'
                                               f'<b>‚ö° Deepseek-QWEN</b> - Deepseek –Ω–∞ –±–∞–∑–µ –∫–∏—Ç–∞–π—Å–∫–æ–π –º–æ–¥–µ–ª–∏ QWEN\n\n'
                                               f'<b>üçì OpenAI-O3</b> - –†–∞—Å—Å—É–∂–¥–∞—é—â–∞—è –º–æ–¥–µ–ª—å —Å –Ω–∞–∏–ª—É—á—à–∏–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏\n'
                                               f'<b>üß† OpenAI-O4 mini</b> - –î–ª—è –∫–æ–¥–∏–Ω–≥–∞ –∏ —Ç–æ—á–Ω—ã—Ö –Ω–∞—É–∫\n\n'
                                               f'<b>‚ú® GPT-4 Turbo</b> ‚Äì –ú–æ—â–Ω–∞—è –∏ –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å OpenAI —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º.\n'
                                               f'<b>üí• GPT-4.1</b> ‚Äì –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è GPT-4 —Å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏.\n'
                                               f'<b>üíé GPT-4o</b> ‚Äì –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–µ—Ä—Å–∏—è GPT-4.\n'
                                               f'<b>üçÉ GPT-4.1 Mini</b> ‚Äì –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –∏ —ç–∫–æ–Ω–æ–º–∏—á–Ω–∞—è –≤–µ—Ä—Å–∏—è GPT-4.1.\n\n'
                                               f'<b>üîÆ Claude 3.7 Sonnet</b> ‚Äì –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –æ—Ç Anthropic —Å –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é.\n'
                                               f'<b>‚òÅ Claude 3.7 Sonnet (thinking)</b> ‚Äì –í–µ—Ä—Å–∏—è —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º "—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è" –¥–ª—è –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤.\n\n'
                                               f'<b>üí¨ Qwen3 235B A22B</b> ‚Äì –ú–∞—Å—à—Ç–∞–±–Ω–∞—è –º–æ–¥–µ–ª—å Qwen —Å 235 –º–ª—Ä–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –≤—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö.\n'
                                               f'<b>ü§ñ Qwen3 30B A3B</b> ‚Äì –ë–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è, –Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è Qwen3, –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞.\n\n'
                                               f'<b>üí° Gemini 2.0 Flash Lite</b> ‚Äì –û–±–ª–µ–≥—á—ë–Ω–Ω–∞—è –∏ –±—ã—Å—Ç—Ä–∞—è –≤–µ—Ä—Å–∏—è Gemini 2.0, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.',
                                       parse_mode="html", reply_markup=builder.as_markup())
    except Exception as e:
        print(e)




@router.callback_query(F.data.startswith('model_'))
async def choose_txt_model(callback_query: CallbackQuery):
    try:
        new_model = callback_query.data.replace('model_', '')
        db.set_model(callback_query.from_user.id, new_model)

        await update_keyboard(callback_query.message, callback_query.from_user.id)
    
    except Exception as e:
        print(e)












# IMG GENERATION MODELS
@router.callback_query(F.data == 'change_model_photo_categ')
async def change_img_model(callback_query: CallbackQuery):
    try:
        builder = InlineKeyboardBuilder()
        for model_name in img_generation_models.keys():
            builder.button(text=model_name, callback_data=f'img_selected_model_{model_name}')

        builder.adjust(1)

        await callback_query.message.answer('asdadsadsada', parse_mode='MARKDOWN', reply_markup=builder.as_markup())
    except Exception as e:
        pass


@router.callback_query(F.data.startswith('img_selected_model_'))
async def change_img_model_version(callback_query: CallbackQuery):
    try:
        model_name = callback_query.data.split("_")[-1]
        print(model_name)
    
        if model_name not in img_generation_models:
            await callback_query.message.answer("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", parse_mode='MARKDOWN')
            return
    
        versions = img_generation_models[model_name]['versions']
        builder = InlineKeyboardBuilder()

        for version in versions:
            builder.button(text=version['model'], callback_data=f"select_img_version_{version['code']}")

        builder.adjust(1)
    
        await callback_query.message.edit_text(
            f"‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ {model_name}:",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        pass


@router.callback_query(F.data.startswith('select_img_version_'))
async def select_img_model(callback_query: CallbackQuery):
    try:
        version_code = callback_query.data.split("_")[-1]
        db.set_model_img(callback_query.from_user.id, version_code)

        model_name = None
        for m_name, m_data in img_generation_models.items():
            if any(v['code'] == version_code for v in m_data['versions']):
                model_name = m_name
                break

        if model_name:
            versions = img_generation_models[model_name]['versions']
            builder = InlineKeyboardBuilder()
            
            for version in versions:
                if version['code'] == version_code:
                    builder.button(text=f"‚úÖ {version['model']}", callback_data=f"select_img_version_{version['code']}")
                else:
                    builder.button(text=version['model'], callback_data=f"select_img_version_{version['code']}")
            
            builder.adjust(1)

            await callback_query.message.edit_text(
                f"‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ {model_name}:",
                reply_markup=builder.as_markup()
            )

    except Exception as e:
        print(e)








# POLLING
async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

if '__main__' == __name__:
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print('Goodbye!')
